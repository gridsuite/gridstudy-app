diff --git a/src/components/dialogs/root-network/root-network-case-selection.tsx b/src/components/dialogs/root-network/root-network-case-selection.tsx
index be726ba6..b5afebe0 100644
--- a/src/components/dialogs/root-network/root-network-case-selection.tsx
+++ b/src/components/dialogs/root-network/root-network-case-selection.tsx
@@ -7,18 +7,20 @@
 
 import { Box, Button, Grid, Typography } from '@mui/material';
 import { CASE_ID, CASE_NAME } from 'components/utils/field-constants';
-import { useEffect, useState } from 'react';
+import { useCallback, useEffect, useState } from 'react';
 import { FormattedMessage } from 'react-intl';
 import ImportCaseDialog from '../import-case-dialog';
 import { TreeViewFinderNodeProps, fetchDirectoryElementPath, useSnackMessage } from '@gridsuite/commons-ui';
 import { useWatch } from 'react-hook-form';
 import { FolderOutlined } from '@mui/icons-material';
+import { UUID } from 'crypto';
 
 interface RootNetworkCaseSelectionProps {
     onSelectCase: (selectedCase: TreeViewFinderNodeProps) => void;
+    caseUuid?: UUID;
 }
 
-export const RootNetworkCaseSelection = ({ onSelectCase }: RootNetworkCaseSelectionProps) => {
+export const RootNetworkCaseSelection = ({ onSelectCase, caseUuid }: RootNetworkCaseSelectionProps) => {
     const [isDialogOpen, setIsDialogOpen] = useState(false);
     const caseNameWatch = useWatch({ name: CASE_NAME });
     const caseIdWatch = useWatch({ name: CASE_ID });
@@ -31,9 +33,19 @@ export const RootNetworkCaseSelection = ({ onSelectCase }: RootNetworkCaseSelect
     };
 
     // fetch folder name of selected case to build default file name
-    useEffect(() => {
-        if (caseIdWatch) {
-            fetchDirectoryElementPath(caseIdWatch)
+    // useEffect(() => {
+    //     if (caseIdWatch || (isDialogOpen && caseuuid)) {
+    //
+    //     }
+    // }, [caseIdWatch, snackError]);
+
+    const fetchDirectoryName = useCallback(
+        (caseId: UUID) => {
+            if (!caseId) {
+                return;
+            }
+
+            fetchDirectoryElementPath(caseId)
                 .then((res) => {
                     if (!res || res.length < 2) {
                         snackError({
@@ -41,7 +53,11 @@ export const RootNetworkCaseSelection = ({ onSelectCase }: RootNetworkCaseSelect
                         });
                         return;
                     }
+                    console.log('   ppppppp ', caseId);
+
                     const parentFolderIndex = res.length - 2;
+                    console.log('ppppppp ', res[parentFolderIndex].elementName);
+
                     setDirectoryName(res[parentFolderIndex].elementName);
                 })
                 .catch((error) => {
@@ -50,8 +66,29 @@ export const RootNetworkCaseSelection = ({ onSelectCase }: RootNetworkCaseSelect
                         headerId: 'rootNetworkDirectoryFetchingError',
                     });
                 });
+        },
+        [snackError] // Dependencies remain stable
+    );
+
+    // Fetch when caseIdWatch changes (case selected)
+    useEffect(() => {
+        console.log('ppppppp caseIdWatch', caseIdWatch);
+
+        if (caseIdWatch) {
+            alert("1")
+            fetchDirectoryName(caseIdWatch);
+        }
+    }, [caseIdWatch, fetchDirectoryName]);
+
+    // Fetch when dialog opens for the first time with caseuuid
+    useEffect(() => {
+        console.log('ppppggppp caseUuid', caseUuid, "caseIdWatch ",caseIdWatch);
+        if (!caseIdWatch && caseUuid && !directoryName) {
+            alert("12")
+
+            fetchDirectoryName(caseUuid);
         }
-    }, [caseIdWatch, snackError]);
+    }, [caseUuid,directoryName, fetchDirectoryName,caseIdWatch]);
 
     return (
         <>
diff --git a/src/components/graph/menus/network-modification-menu.type.ts b/src/components/graph/menus/network-modification-menu.type.ts
index 3c24f1fd..b779f760 100644
--- a/src/components/graph/menus/network-modification-menu.type.ts
+++ b/src/components/graph/menus/network-modification-menu.type.ts
@@ -8,6 +8,7 @@
 import { UUID } from 'crypto';
 export interface RootNetworkMetadata {
     rootNetworkUuid: UUID;
+    caseUuid: UUID;
     name: string;
     tag: string;
     isCreating: boolean;
